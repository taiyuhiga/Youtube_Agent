import PptxGenJS from 'pptxgenjs';

// スライドコンテンツの型定義
interface SlideContent {
  title?: string;
  body?: string[];
  lists?: string[][];
  images?: string[];
  styles?: Record<string, string>;
}

// HTMLをパースしてスライド情報を抽出
export const parseHTMLSlide = (htmlContent: string): SlideContent => {
  // ブラウザ環境でのみDOMParserを使用
  if (typeof window === 'undefined') {
    // サーバーサイドではシンプルな正規表現でパース
    const titleMatch = htmlContent.match(/<h[1-6][^>]*>([^<]+)<\/h[1-6]>/i);
    const paragraphs = htmlContent.match(/<p[^>]*>([^<]+)<\/p>/gi) || [];
    const listItems = htmlContent.match(/<li[^>]*>([^<]+)<\/li>/gi) || [];
    
    return {
      title: titleMatch ? titleMatch[1].trim() : undefined,
      body: paragraphs.map(p => p.replace(/<\/?p[^>]*>/gi, '').trim()),
      lists: listItems.length > 0 ? [listItems.map(li => li.replace(/<\/?li[^>]*>/gi, '').trim())] : []
    };
  }
  
  // クライアントサイドではDOMParserを使用
  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlContent, 'text/html');
  
  // スタイル情報を抽出
  const styleElement = doc.querySelector('style');
  const styles: Record<string, string> = {};
  if (styleElement) {
    // 簡単なスタイル解析（色情報など）
    const colorMatch = styleElement.textContent?.match(/color:\s*([^;]+)/);
    const bgColorMatch = styleElement.textContent?.match(/background-color:\s*([^;]+)/);
    if (colorMatch) styles.textColor = colorMatch[1].trim();
    if (bgColorMatch) styles.backgroundColor = bgColorMatch[1].trim();
  }
  
  // スライドセクションを取得
  const slideSection = doc.querySelector('section.slide') || doc.body;
  
  // タイトルを取得（h1, h2, h3の順で検索）
  const titleElement = slideSection.querySelector('h1, h2, h3');
  const title = titleElement?.textContent?.trim();
  
  // 本文を取得
  const paragraphs = Array.from(slideSection.querySelectorAll('p')).map(p => p.textContent?.trim() || '');
  
  // リストを取得
  const lists: string[][] = [];
  const ulElements = slideSection.querySelectorAll('ul, ol');
  ulElements.forEach(ul => {
    const items = Array.from(ul.querySelectorAll('li')).map(li => li.textContent?.trim() || '');
    if (items.length > 0) lists.push(items);
  });
  
  // SVG画像を取得（Base64に変換）
  const svgElements = slideSection.querySelectorAll('svg');
  const images: string[] = [];
  svgElements.forEach(svg => {
    const svgString = new XMLSerializer().serializeToString(svg);
    const base64 = btoa(unescape(encodeURIComponent(svgString)));
    images.push(`data:image/svg+xml;base64,${base64}`);
  });
  
  return {
    title,
    body: paragraphs.filter(p => p.length > 0),
    lists,
    images,
    styles
  };
};

// 複数のHTMLスライドをPPTXに変換
export const convertHTMLToPPTX = async (htmlSlides: string | string[], presentationTitle: string = 'プレゼンテーション'): Promise<PptxGenJS> => {
  const pptx = new PptxGenJS();
  
  // プレゼンテーションのメタデータ設定
  pptx.author = 'AI Agent';
  pptx.company = 'Generated by AI';
  pptx.title = presentationTitle;
  
  // スライドサイズを16:9に設定
  pptx.defineLayout({ name: 'LAYOUT_16x9', width: 10, height: 5.625 });
  pptx.layout = 'LAYOUT_16x9';
  
  // 配列に変換
  const slides = Array.isArray(htmlSlides) ? htmlSlides : [htmlSlides];
  
  // 各スライドを処理
  slides.forEach((htmlContent, index) => {
    const slideContent = parseHTMLSlide(htmlContent);
    const slide = pptx.addSlide();
    
    // 背景色の設定
    if (slideContent.styles?.backgroundColor && slideContent.styles.backgroundColor !== 'transparent') {
      slide.background = { color: slideContent.styles.backgroundColor.replace('#', '') };
    } else {
      slide.background = { color: 'FFFFFF' };
    }
    
    let yPosition = 0.5; // 初期Y位置
    
    // タイトルの追加
    if (slideContent.title) {
      slide.addText(slideContent.title, {
        x: 0.5,
        y: yPosition,
        w: 9,
        h: 1,
        fontSize: 32,
        bold: true,
        color: slideContent.styles?.textColor?.replace('#', '') || '363636',
        align: 'center',
        valign: 'middle'
      });
      yPosition += 1.2;
    }
    
    // 本文の追加
    if (slideContent.body && slideContent.body.length > 0) {
      slideContent.body.forEach(paragraph => {
        if (paragraph) {
          slide.addText(paragraph, {
            x: 0.5,
            y: yPosition,
            w: 9,
            fontSize: 18,
            color: slideContent.styles?.textColor?.replace('#', '') || '363636',
            align: 'left',
            valign: 'top',
            wrap: true
          });
          yPosition += 0.8;
        }
      });
    }
    
    // リストの追加
    if (slideContent.lists && slideContent.lists.length > 0) {
      slideContent.lists.forEach(list => {
        const bulletPoints = list.map(item => ({
          text: item,
          options: { bullet: true, indentLevel: 0 }
        }));
        
        slide.addText(bulletPoints, {
          x: 0.5,
          y: yPosition,
          w: 9,
          fontSize: 16,
          color: slideContent.styles?.textColor?.replace('#', '') || '363636',
          align: 'left',
          valign: 'top'
        });
        yPosition += list.length * 0.4 + 0.3;
      });
    }
    
    // SVG画像の追加（現在はスキップ - PPTXはSVGを直接サポートしていない）
    // 将来的には、SVGをPNGに変換してから追加する実装が必要
    
    // スライド番号の追加
    slide.addText(`${index + 1} / ${slides.length}`, {
      x: 8.5,
      y: 5.2,
      w: 1.5,
      h: 0.3,
      fontSize: 10,
      color: '999999',
      align: 'right'
    });
  });
  
  return pptx;
};

// PPTXファイルをダウンロード
export const downloadPPTX = async (pptx: PptxGenJS, fileName: string = 'presentation.pptx') => {
  try {
    await pptx.writeFile({ fileName });
    return { success: true, message: `${fileName}をダウンロードしました。` };
  } catch (error) {
    console.error('PPTX download error:', error);
    return { success: false, message: 'PPTXファイルのダウンロードに失敗しました。' };
  }
}; 